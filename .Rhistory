pheatmap(cnorm[top_genes,], labels_row = res$symbol[1:10], scale = 'row', annotation_col = sampleTable[, c('genotipo', 'medium')])
listEnsembl()
ensembl <- useMart(biomart = "ensembl", dataset ="scerevisiae_gene_ensembl")
t2g <- getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name"), mart = ensembl)
res$symbol <- t2g$external_gene_name[match(rownames(res), t2g$ensembl_gene_id)]
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], res$symbol[1:10])
cnorm <- counts(dds, normalized = T)
top_genes <- rownames(res)[1:10]
anno <- sampleTable
pheatmap(cnorm[top_genes,], labels_row = res$symbol[1:10], scale = 'row', annotation_col = sampleTable[, c('genotipo', 'medium')])
top_genes <- rownames(res)[1:20]
anno <- sampleTable
pheatmap(cnorm[top_genes,], labels_row = res$symbol[1:20], scale = 'row', annotation_col = sampleTable[, c('genotipo', 'medium')])
gene <- cnorm['HRA1', ]
gene
se<-DESeqDataSetFromTximport(txi.kallisto, colData = sampleTable, design = ~ genotipo)
dds <- DESeq(se)
res <- results(dds)
res <- res[sort.list(res$padj),]
par(mfrow = c(1, 2))
ok <- which(rowMeans(counts(dds)) > 1)
cnorm <- counts(dds, normalized = T)
mean_treat <- mean(split(gene, sampleTable$genotipo)[['trt']])
mean_untreat <- mean(split(gene, sampleTable$genotipo)[['untrt']])
mean_treat <- mean(split(gene, sampleTable$genotipo)[['genotipo']])
mean_treat <- mean(split(gene, sampleTable$genotipo)[['medium']])
mean_untreat <- mean(split(gene, sampleTable$genotipo)[['medium']])
asplit <- split(1:ncol(cnorm), sampleTable$dex)
asplit <- split(1:ncol(cnorm), sampleTable$genotipo)
fcs <- apply(cnorm, 1, function(x) log2(mean(x[asplit[[2]]]) / mean(x[asplit[[1]]])))
plot(res[names(fcs), 'log2FoldChange'], fcs)
abline(0, 1)
plot(res[names(fcs), 'log2FoldChange'], fcs)
abline(0, 1)
par(mfrow = c(1, 2))
raw <- counts(dds, normalized = F)['HRA1',]
norm <- counts(dds, normalized = T)['HRA1',]
boxplot(split(raw, sampleTable$dex), main = 'Raw')
boxplot(split(raw, sampleTable$dex), main = 'raw')
boxplot(split(raw, sampleTable$genotipo), main = 'Raw')
boxplot(split(norm, sampleTable$genotipo), main = 'Norm')
boxplot(split(raw, sampleTable$genotipo), main = 'Raw')
boxplot(split(norm, sampleTable$genotipo), main = 'Norm')
plotDispEsts(dds)
plotCounts(dds = dds, gene = 'HRA1', intgroup = 'medium')
library(biomaRt)
ensembl <- useMart(biomart = "ensembl", dataset ="scerevisiae_gene_ensembl")
ensembl <- useMart(biomart = "ensembl", dataset ="scerevisiae_gene_ensembl")
t2g <- getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name"), mart = ensembl)
res$symbol <- t2g$external_gene_name[match(rownames(res), t2g$ensembl_gene_id)]
library(pheatmap)
cnorm <- counts(dds, normalized = T)
top_genes <- rownames(res)[1:20]
anno <- sampleTable
pheatmap(cnorm[top_genes,], labels_row = res$symbol[1:20], scale = 'row', annotation_col = sampleTable[, c('genotipo', 'medium')])
pheatmap(cnorm[top_genes,], labels_row = res$symbol[1:20], scale = 'row')
pheatmap(cnorm[top_genes,], labels_row = res$symbol[1:20], scale = 'row',
annotation_col = sampleTable[, c('genotipo', 'medium')])
pheatmap(cnorm[top_genes,], labels_row = res$symbol[1:10], scale = 'row',
annotation_col = sampleTable[, c('genotipo', 'medium')])
pheatmap(cnorm[top_genes,], labels_row = res$symbol[1:5], scale = 'row',
annotation_col = sampleTable[, c('genotipo', 'medium')])
top_genes <- rownames(res)[1:10]
anno <- sampleTable
pheatmap(cnorm[top_genes,], labels_row = res$symbol[1:10], scale = 'row',
annotation_col = sampleTable[, c('genotipo', 'medium')])
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:10], scale="row", annotation_col = sampleTable[,c("medium", "genotipo")])
topGenes<-rownames(res)[1:10]
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:10], scale="row", annotation_col = sampleTable[,c("medium", "genotipo")])
load(file = '~/Documents/participacionTIBUNAM/taller/martes/practica/txi.practica.RData')
sampleTable<-read.csv("sampleTable.csv")
library(tidyr)
sampleTable<-separate(sampleTable, col = X, into = c("gen", "fa","g"))
rownames(sampleTable)<-sampleTable$gen
sampleTable<-sampleTable[,-c(1:3)]
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ genotipo)
#primer paso
dds <- estimateSizeFactors(dds)
#segundo paso
dds<- estimateDispersions(dds)
#tercer paso
# si se corre asi, lo que se esta probando es el diseño escogido
dds<-nbinomWaldTest(dds)
dds<-DESeq(dds)#esta funcion hace lo mismo que hicimos en los tres pasos pasados
res<-results(dds)#muestra los resultados que salen del DESeq
res <- res[sort.list(res$padj),]
head(txi.kallisto$abundance)
#caclulate de foldcahnge
cnorm<-counts(dds, normalized=T)#revisar si este bien la posicion de columnas - filas
gene<-cnorm["HRA1", ]###
gene
cnorm
library(biomaRt)
ensembl<-useMart(biomart = "ensembl", dataset = "scerevisiae_gene_ensembl")
t2g<-getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name"), mart = ensembl)
res$symbol<-t2g$external_gene_name[match(rownames(res), t2g$ensembl_gene_id)]
library(pheatmap)
topGenes<-rownames(res)[1:10]
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:10], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
sampleTable
topGenes
cnorm
res$symbol
res$symbol[1:10]
res$symbol[1:50]
res$symbol[1:100]
res$symbol[1:400]
res$baseMean
head(res)
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:10], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
topGenes<-rownames(res)[1:20]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:20], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
list.packages
help="utils"
packageVersion()
packageVersion(all)
installed.packages()
paquetes<-[[install.packages()]]
paquetes<-install.packages()
paquetes
paquetes<-list(install.packages())
paquetes<-array(install.packages())
paquetes<-list(install.packages())
paquetes
paquetes<-installed.packages()
head(paquetes)
res$symbol
pheatmap(cnorm[top_genes,], labels_row = res$symbol[1:10], scale = 'row',
annotation_col = sampleTable[, c('genotipo', 'medium')])
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:10])
head(res)
#checking the genes
boxplot(split(cnorm["HRA1"], paste(sampleTable$genotipo)))
dds<-nbinomWaldTest(dds)
dds
dds<-DESeq(dds)#esta funcion hace lo mismo que hicimos en los tres pasos pasados
res<-results(dds)#muestra los resultados que salen del DESeq
res<-res[sort.list(res$padj),]
#checking the genes
boxplot(split(cnorm["HRA1"], paste(sampleTable$genotipo)))
#checking the genes
boxplot(split(cnorm["HRA1"], paste(sampleTable$genotipo)))
plotMA(dds)
cnorm<-counts(dds, normalized=T)
topGenes<-rownames(res)[1:10]
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:10], scale="row", annotation_col = sampleTable[,c("medium", "genotipo")])
res$symbol
res$symbol[1:10]
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:10], scale="row", annotation_col = sampleTable[,c("medium", "genotipo")])
rld <- rlog(dds)
plotPCA(rld, intgroup = c("genotipo", "medium")) # treat must match a column name in sampleTable
#another PCA
#da problemas porque un gen da 0 en el conteo (PWR1)
#esto genera que algunos valores sean a infinito porque se dividen entre 0
rldM<-assays(rld)[[1]]
rldM<-t(rldM)
rldM<- rldM[,which(apply(rldM, 2, var)>0)]#aqui se descarta el que da 0 en el conteo
prc<-prcomp(rldM, center = T, scale. = T)
plot(prc$x)
dds
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:10], scale="row", annotation_col = sampleTable[,c("medium", "genotipo")])
topGenes<-rownames(res)[6]
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:10], scale="row", annotation_col = sampleTable[,c("medium", "genotipo")])
topGenes<-rownames(res)[1:10]
pheatmap(cnorm[topGenes,], labels_row = res$symbol[6], scale="row", annotation_col = sampleTable[,c("medium", "genotipo")])
prc<-prcomp(rldM, center = T, scale. = T)
plot(prc$x)
plot(prc$x, col=sampleTable$genotipo)
prc<-prcomp(log1p(rldM), center = T, scale. = T)
prc<-prcomp(log1p(counts(rldM)), center = T, scale. = T)
prc<-prcomp(log(counts(rldM)+1), center = T, scale. = T)
log<-log1p(counts(rldM))
counts(rldM)
counts(rldM)
rldM
dds
??rlog
counts(dds)
counts(rldM)
rldM
log<-log(t(rldM)+1)
fpkm <- counts(dds_all)
library("DESeq2")
library("ggplot2")
library("dplyr")
load(file = '~/Documents/participacionTIBUNAM/taller/martes/practica/txi.practica.RData')
st<-read.table("~/Documents/participacionTIBUNAM/taller/martes/practica/samples.txt")
sampleTable<-read.csv("sampleTable.csv")
library(tidyr)
sampleTable<-separate(sampleTable, col = X, into = c("gen", "fa","g"))
rownames(sampleTable)<-sampleTable$gen
sampleTable<-sampleTable[,-c(1:3)]
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ genotipo)
#primer paso
dds <- estimateSizeFactors(dds)
#segundo paso
dds<- estimateDispersions(dds)
#tercer paso
# si se corre asi, lo que se esta probando es el diseño escogido
dds<-nbinomWaldTest(dds)
dds<-DESeq(dds)#esta funcion hace lo mismo que hicimos en los tres pasos pasados
dds<-DESeq(dds)#esta funcion hace lo mismo que hicimos en los tres pasos pasados
res<-results(dds)#muestra los resultados que salen del DESeq
res<-results(dds)#muestra los resultados que salen del DESeq
res <- res[sort.list(res$padj),]
#caclulate de foldcahnge
cnorm<-counts(dds, normalized=T)#revisar si este bien la posicion de columnas - filas
library(biomaRt)
ensembl<-useMart(biomart = "ensembl", dataset = "scerevisiae_gene_ensembl")
t2g<-getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name"), mart = ensembl)
res$symbol<-t2g$external_gene_name[match(rownames(res), t2g$ensembl_gene_id)]
library(pheatmap)
topGenes<-rownames(res)[1:20]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:20], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:10])
dds<-nbinomWaldTest(dds)
dds<-DESeq(dds)
res<-results(dds)
res<-res[sort.list(res$padj),]
plot(res$log2FoldChange, -log10(res$pvalue))
res<-results(dds)
plot(res$log2FoldChange, -log10(res$pvalue))
res<-res[sort.list(res$padj),]
plotMA(dds)
#heatmap
library(pheatmap)
cnorm<-counts(dds, normalized=T)
topGenes<-rownames(res)[1:10]
pheatmap(cnorm[topGenes,], labels_row = res$symbol[6], scale="row", annotation_col = sampleTable[,c("medium", "genotipo")])
rld <- rlog(dds)
plotPCA(rld, intgroup = c("genotipo", "medium")) # treat must match a column name in sampleTable
plot(res$log2FoldChange, -log10(res$pvalue))
library("DESeq2")
library("ggplot2")
library("dplyr")
load(file = '~/Documents/participacionTIBUNAM/taller/martes/practica/txi.practica.RData')
st<-read.table("~/Documents/participacionTIBUNAM/taller/martes/practica/samples.txt")
sampleTable<-read.csv("sampleTable.csv")
library(tidyr)
sampleTable<-separate(sampleTable, col = X, into = c("gen", "fa","g"))
rownames(sampleTable)<-sampleTable$gen
sampleTable<-sampleTable[,-c(1:3)]
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ genotipo)
#primer paso
dds <- estimateSizeFactors(dds)
#segundo paso
dds<- estimateDispersions(dds)
#tercer paso
# si se corre asi, lo que se esta probando es el diseño escogido
dds<-nbinomWaldTest(dds)
dds<-DESeq(dds)#esta funcion hace lo mismo que hicimos en los tres pasos pasados
dds<-DESeq(dds)#esta funcion hace lo mismo que hicimos en los tres pasos pasados
res<-results(dds)#muestra los resultados que salen del DESeq
res <- res[sort.list(res$padj),]
#caclulate de foldcahnge
cnorm<-counts(dds, normalized=T)#revisar si este bien la posicion de columnas - filas
ensembl<-useMart(biomart = "ensembl", dataset = "scerevisiae_gene_ensembl")
library(biomaRt)
ensembl<-useMart(biomart = "ensembl", dataset = "scerevisiae_gene_ensembl")
t2g<-getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name"), mart = ensembl)
res$symbol<-t2g$external_gene_name[match(rownames(res), t2g$ensembl_gene_id)]
library(pheatmap)
topGenes<-rownames(res)[1:20]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:20], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:10])
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:5])
rld <- rlog(dds)
plotPCA(rld, intgroup = c("genotipo", "medium")) # treat must match a column name in sampleTable
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:3])
sampleTable
sampleTable$myGenotype<-c("wild", "mut", "mut", "mut", "wild", "wild")
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ myGenotype)
#primer paso
dds <- estimateSizeFactors(dds)
#segundo paso
dds<- estimateDispersions(dds)
#tercer paso
# si se corre asi, lo que se esta probando es el diseño escogido
dds<-nbinomWaldTest(dds)
dds<-DESeq(dds)#esta funcion hace lo mismo que hicimos en los tres pasos pasados
res<-results(dds)#muestra los resultados que salen del DESeq
res <- res[sort.list(res$padj),]
head(res)
#caclulate de foldcahnge
cnorm<-counts(dds, normalized=T)#revisar si este bien la posicion de columnas - filas
library(pheatmap)
topGenes<-rownames(res)[1:20]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:20], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:3])
plot(res$log2FoldChange, -log10(res$pvalue))
plotMA(dds)
rld <- rlog(dds)
plotPCA(rld, intgroup = c("genotipo", "medium")) # treat must match a column name in sampleTable
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:3])
gene<-cnorm["RDN37-2", ]###
gene
plotCounts(dds = dds, gene = 'RDN37-2', intgroup = 'medium')
raw <- counts(dds, normalized = F)['RDN37-2',]
norm <- counts(dds, normalized = T)['RDN37-2',]
boxplot(split(raw, sampleTable$genotipo), main = 'Raw')
boxplot(split(norm, sampleTable$genotipo), main = 'Norm')
par(mfrow=c(1,2))
boxplot(split(raw, sampleTable$genotipo), main = 'Raw')
boxplot(split(norm, sampleTable$genotipo), main = 'Norm')
boxplot(split(norm, sampleTable$genotipo), main = 'Norm')
with(subset(res, padj<.05))
with(res, plot(log2FoldChange))
with(res, plot(log2FoldChange, -log10(res$pvalue)))
with(res, plot(log2FoldChange, -log10(res$pvalue)))
with(subset(res, padj<.05))
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ genotipo*medium)
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ medium)
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ medium*genotipo)
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ medium)
#primer paso
dds <- estimateSizeFactors(dds)
#segundo paso
dds<- estimateDispersions(dds)
#tercer paso
# si se corre asi, lo que se esta probando es el diseño escogido
dds<-nbinomWaldTest(dds)
dds<-DESeq(dds)#esta funcion hace lo mismo que hicimos en los tres pasos pasados
res<-results(dds)#muestra los resultados que salen del DESeq
res <- res[sort.list(res$padj),]
head(res)
topGenes<-rownames(res)[1:20]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:20], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
plot(res$log2FoldChange, -log10(res$pvalue))
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:3])
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ genotipo + medium)
#primer paso
dds <- estimateSizeFactors(dds)
#segundo paso
dds<- estimateDispersions(dds)
#tercer paso
# si se corre asi, lo que se esta probando es el diseño escogido
dds<-nbinomWaldTest(dds)
dds<-DESeq(dds)#esta funcion hace lo mismo que hicimos en los tres pasos pasados
res<-results(dds)#muestra los resultados que salen del DESeq
res <- res[sort.list(res$padj),]
#caclulate de foldcahnge
cnorm<-counts(dds, normalized=T)#revisar si este bien la posicion de columnas - filas
topGenes<-rownames(res)[1:20]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:20], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ genotipo * medium)
vignette('DESeq2')
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ genotipo + medium)
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:3], col = "red")
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:3], col = "red")
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:10], col = "red")
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:10])
#primer paso
dds <- estimateSizeFactors(dds)
#segundo paso
dds<- estimateDispersions(dds)
dds<-DESeq(dds)#esta funcion hace lo mismo que hicimos en los tres pasos pasados
res<-results(dds)#muestra los resultados que salen del DESeq
res <- res[sort.list(res$padj),]
norm <- counts(dds, normalized = T)['RDN58-2',]
boxplot(split(norm, sampleTable$genotipo), main = 'Norm')
boxplot(split(norm, sampleTable$myGenotype), main = 'Norm')
sampleTable$myGenotype<-c("wild", "delection", "delection", "delection", "wild", "wild")
boxplot(split(norm, sampleTable$myGenotype), main = 'Norm')
boxplot(split(norm, sampleTable$genotipo), main = 'Norm')
boxplot(split(norm, sampleTable$medium), main = 'Norm')
sampleTable
sampleTable$treatmets<-c("treatment", "no treatment", "no treatment", "no treatment", "treatment", "no treatment")
par(mfrow=c(1,2))
boxplot(split(norm, sampleTable$myGenotype), main = 'Norm')
boxplot(split(norm, sampleTable$treatmets), main = 'Norm')
topGenes<-rownames(res)[1:20]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:20], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
plot(res$log2FoldChange, -log10(res$pvalue))
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:10])
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:20])
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:20])
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:50])
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:100])
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:10])
topGenes<-rownames(res)[1:30]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:30], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
topGenes<-rownames(res)[1:25]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:25], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
topGenes<-rownames(res)[1:20]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:20], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
res <- res[sort.list(res$padj),]
topGenes<-rownames(res)[1:20]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:20], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
plot(res$log2FoldChange, -log10(res$pvalue))
text(res$log2FoldChange[1:10], -log10(res$pvalue)[1:10], rownames(res)[1:10])
dds<-nbinomWaldTest(dds)
dds<-DESeq(dds)
res<-results(dds)
res<-res[sort.list(res$padj),]
cnorm<-counts(dds, normalized=T)
topGenes<-rownames(res)[1:10]
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:10], scale="row", annotation_col = sampleTable[,c("medium", "genotipo")])
topGenes<-rownames(res)[1:20]
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo")])
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
res
library("DESeq2")
library("ggplot2")
library("dplyr")
load(file = '~/Documents/participacionTIBUNAM/taller/martes/practica/txi.practica.RData')
st<-read.table("~/Documents/participacionTIBUNAM/taller/martes/practica/samples.txt")
sampleTable<-read.csv("sampleTable.csv")
library(tidyr)
sampleTable<-separate(sampleTable, col = X, into = c("gen", "fa","g"))
rownames(sampleTable)<-sampleTable$gen
sampleTable<-sampleTable[,-c(1:3)]
dds <- DESeqDataSetFromTximport(txi = txi.kallisto, colData = sampleTable, design = ~ genotipo + medium)
#primer paso
dds <- estimateSizeFactors(dds)
#segundo paso
dds<- estimateDispersions(dds)
#tercer paso
# si se corre asi, lo que se esta probando es el diseño escogido
dds<-nbinomWaldTest(dds)
dds<-DESeq(dds)#esta funcion hace lo mismo que hicimos en los tres pasos pasados
res<-results(dds)#muestra los resultados que salen del DESeq
res <- res[sort.list(res$padj),]
#caclulate de foldcahnge
cnorm<-counts(dds, normalized=T)#revisar si este bien la posicion de columnas - filas
library(biomaRt)
ensembl<-useMart(biomart = "ensembl", dataset = "scerevisiae_gene_ensembl")
t2g<-getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name"), mart = ensembl)
res$symbol<-t2g$external_gene_name[match(rownames(res), t2g$ensembl_gene_id)]
library(pheatmap)
topGenes<-rownames(res)[1:20]
pheatmap(cnorm[topGenes,], labels_row = rownames(res)[1:20], scale="row",
annotation_col = sampleTable[,c("medium", "genotipo")])
res
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
with(subset(res, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(subset(res, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="orange"))
with(subset(res, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="green", abline(v=c(-1,1), col= "red", lty="dashed")))
plot(res$log2FoldChange, -log10(res$pvalue))
plot(res$log2FoldChange, -log10(res$pvalue))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-6,6)))
with(subset(res, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(subset(res, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="orange"))
with(subset(res, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="green", abline(v=c(-1,1), col= "red", lty="dashed")))
plot(res$log2FoldChange, -log10(res$pvalue))
sampleTable
sampleTable$myGenotype<-c("wild", "delection", "delection", "delection", "wild", "wild")
sampleTable$treatmets<-c("treatment", "no treatment", "no treatment", "no treatment", "treatment", "no treatment")
sampleTable
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatments")])
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")])
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], treeheight_col = 50)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], treeheight_col = 100)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, height = 50)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, height = 100)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, height = 500)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = F, treeheight_col = 20, treeheight_row = 20, height = 100)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20, cellwidth = 50)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20, cellwidth = 20)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20, cellwidth = 30)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20, cellwidth = 30, cellheight = 50)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20, cellwidth = 30, cellheight = 10)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20, cellwidth = 30, cellheight = 20)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20, cellwidth = 30, cellheight = 20)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20, cellwidth = 30, cellheight = 20, legend = T)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20, cellwidth = 30, cellheight = 20, legend = T)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = F)
dds<-nbinomWaldTest(dds)
dds<-DESeq(dds)
res<-results(dds)
res<-res[sort.list(res$padj),]
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20, cellwidth = 30, cellheight = 20, legend = T)
pheatmap(cnorm[topGenes,], labels_row = res$symbol[1:20], scale="row", annotation_col = sampleTable[,c("medium", "genotipo", "treatmets")], display_numbers = T, treeheight_col = 20, treeheight_row = 20, cellwidth = 30, cellheight = 20, legend = T)
getcwd()
getwd()
setwd
setwd('~/Documents/programacionEstadistica/tallerGitUNA/')
git status
